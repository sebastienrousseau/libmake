var searchIndex = JSON.parse('{\
"libmake":{"doc":"A code generator to reduce repetitive tasks and build …","t":"AAOOOOOOAAAAFAFFFDMLLMMLLLFFFLLMLMMMLLLLLLFFFFFFFLMLMMMLMLMMMLLLLLMMFFFFF","n":["args","ascii","assert_create_directory","assert_generate_files","assert_generate_from_config","assert_generate_from_csv","assert_generate_from_json","assert_generate_from_yaml","cli","generator","interface","macros","run","utils","process_arguments","generate_ascii_art","build_cli","FileGenerationParams","author","borrow","borrow_mut","build","categories","clone","clone_into","cmp","copy_and_replace_template","create_directory","create_template_folder","default","default_params","description","deserialize","documentation","edition","email","eq","equivalent","equivalent","fmt","from","from_args","generate_files","generate_from_args","generate_from_config","generate_from_csv","generate_from_json","generate_from_toml","generate_from_yaml","hash","homepage","into","keywords","license","name","new","output","partial_cmp","readme","repository","rustversion","serialize","to_owned","try_from","try_into","type_id","version","website","replace_placeholders","get_config_field","get_csv_field","get_json_field","get_yaml_field"],"q":[[0,"libmake"],[14,"libmake::args"],[15,"libmake::ascii"],[16,"libmake::cli"],[17,"libmake::generator"],[68,"libmake::interface"],[69,"libmake::utils"]],"d":["The <code>args</code> module contains functions for processing …","The <code>ascii</code> module contains functions for generating ASCII …","A macro for creating a new directory.","A macro for generating a new set of file templates using …","A macro for generating a new set of file templates using a …","A macro for generating a new set of file templates using a …","A macro for generating a new set of file templates using a …","A macro for generating a new set of file templates using a …","The <code>cli</code> module contains functions for processing …","The <code>generator</code> module contains functions for generating the …","The <code>interface</code> module contains functions for displaying the …","The <code>macros</code> module contains functions for generating macros.","Initializes the logger with a file logger and a terminal …","The <code>utils</code> module contains a function for reading a CSV …","Processes the command line arguments provided to the …","Generates ASCII art from the given text using the …","Builds and returns a set of command-line arguments using …","Structure for holding the parameters for generating the …","The author of the project (optional).","","","The build command to be used for building the project …","The categories that the project belongs to (optional).","","","","Copies a template file to the output directory and …","Creates a directory if it does not exist. If the directory …","Creates the template directory and downloads the template …","","Creates a default instance with default values.","A short description of the project (optional).","","The documentation URL of the project (optional).","The edition of the project (optional).","The email address of the author (optional).","","","","","Returns the argument unchanged.","Creates a new instance from the command line arguments.","Generates files for a new Rust project based on given …","Generates files for a new Rust project based on command …","Generates files for a new Rust project based on a …","Generates files for a new Rust project based on a CSV file.","Generates files for a new Rust project based on a JSON …","Generates files for a new Rust project based on a TOML …","Generates files for a new Rust project based on a YAML …","","The homepage of the project (optional).","Calls <code>U::from(self)</code>.","Keywords that describe the project (optional).","The license under which the project is released (optional).","The name of the project (optional).","Parses the command line arguments and returns a new …","The output directory where the project files will be …","","The name of the readme file (optional).","The URL of the project’s repository (optional).","The minimum Rust version required by the project …","","","","","","The initial version of the project (optional).","The website of the project (optional).","Replaces placeholders in a template file with values from …","Reads as Configuration file at the given file path, file …","Reads a CSV file at the given file path and returns the …","Reads a JSON file at the given file path and returns the …","Reads a YAML file at the given file path and returns the …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]],0,[4],[5],[[],[[3,[4,6]]]],0,0,[[]],[[]],0,0,[7,7],[[]],[[7,7],8],[[5,5,9,7],10],[11,10],[[],10],[[],7],[[],7],0,[12,[[3,[7]]]],0,0,0,[[7,7],13],[[],13],[[],13],[[7,14],15],[[]],[5,[[3,[7,16]]]],[7,10],[5,10],[[5,5],10],[5,10],[5,10],[5,10],[5,10],[[7,17]],0,[[]],0,0,0,[[],7],0,[[7,7],[[18,[8]]]],0,0,0,[[7,19],3],[[]],[[],3],[[],3],[[],20],0,0,[[9,9,7],10],[[[18,[5]],[18,[5]],5],16],[[[18,[5]],21],[[18,[[22,[16]]]]]],[[[18,[5]],5],16],[[[18,[5]],5],16]],"c":[],"p":[[8,"Error"],[3,"Box"],[4,"Result"],[3,"ArgMatches"],[15,"str"],[6,"Error"],[3,"FileGenerationParams"],[4,"Ordering"],[3,"PathBuf"],[6,"Result"],[3,"Path"],[8,"Deserializer"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"String"],[8,"Hasher"],[4,"Option"],[8,"Serializer"],[3,"TypeId"],[15,"usize"],[3,"Vec"]]},\
"xtask":{"doc":"","t":"F","n":["main"],"q":[[0,"xtask"]],"d":[""],"i":[0],"f":[[[],[[2,[1]]]]],"c":[],"p":[[3,"Error"],[4,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
