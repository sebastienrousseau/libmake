var searchIndex = new Map(JSON.parse('[\
["libmake",{"doc":"<code>LibMake</code>","t":"CCQQCCCQQQQQQQQQQQQQQQQCCHCCHHHHHHHHHCCCCCCCHHHHHHHHHCCCCCCCCGPPNNNNNNNNNNNNFONNOONNNNNNONOOONNNNNNNNONOOONONOOONNNNNONOCCHHHHHHHHHHHH","n":["args","cli","extract_param","generate_file","generator","generators","interface","macro_ascii","macro_check_directory","macro_cleanup_directories","macro_create_directories","macro_execute_and_log","macro_generate_files","macro_generate_from_args","macro_generate_from_config","macro_generate_from_csv","macro_generate_from_ini","macro_generate_from_json","macro_generate_from_toml","macro_generate_from_yaml","macro_get_field","macro_log_info","macro_replace_placeholder","macros","models","run","utilities","utils","extract_manual_params","process_arguments","validate_params","build","create_arg","copy_and_replace_template","create_template_folder","generate_files","generate_from_config","args","ascii","csv","ini","json","toml","yaml","generate_from_args","generate_ascii_art","load_standard_font","generate_from_csv","generate_from_ini","generate_from_json","generate_from_toml","generate_from_yaml","replace_placeholders","ascii_macros","directory_macros","file_macros","generator_macros","log_macros","utility_macros","error_ascii_art","model_params","AsciiArtError","ConversionError","FontLoadError","borrow","borrow_mut","fmt","fmt","from","into","source","to_string","try_from","try_into","type_id","vzip","FileGenerationParams","author","borrow","borrow_mut","build","categories","clone","clone_into","cmp","compare","default","default_params","description","deserialize","documentation","edition","email","eq","equivalent","equivalent","equivalent","fmt","from","from_args","hash","homepage","into","keywords","license","name","new","output","partial_cmp","readme","repository","rustversion","serialize","to_owned","try_from","try_into","type_id","version","vzip","website","directory","uuid","cleanup_directory","create_directory","directory","move_output_directory","truncate","generate_unique_string","create_directory","get_config_field","get_csv_field","get_ini_field","get_json_field","get_yaml_field"],"q":[[0,"libmake"],[28,"libmake::args"],[31,"libmake::cli"],[33,"libmake::generator"],[37,"libmake::generators"],[44,"libmake::generators::args"],[45,"libmake::generators::ascii"],[47,"libmake::generators::csv"],[48,"libmake::generators::ini"],[49,"libmake::generators::json"],[50,"libmake::generators::toml"],[51,"libmake::generators::yaml"],[52,"libmake::interface"],[53,"libmake::macros"],[59,"libmake::models"],[61,"libmake::models::error_ascii_art"],[76,"libmake::models::model_params"],[120,"libmake::utilities"],[122,"libmake::utilities::directory"],[127,"libmake::utilities::uuid"],[128,"libmake::utils"],[134,"core::error"],[135,"alloc::boxed"],[136,"core::result"],[137,"clap_builder::parser::matches::arg_matches"],[138,"clap_builder::error"],[139,"core::option"],[140,"clap_builder::builder::arg"],[141,"std::path"],[142,"std::io::error"],[143,"alloc::string"],[144,"figlet_rs"],[145,"core::fmt"],[146,"core::fmt"],[147,"core::cmp"],[148,"serde::de"],[149,"core::hash"],[150,"serde::ser"],[151,"std::path"]],"d":["The <code>args</code> module contains functions for processing …","The <code>cli</code> module contains functions for processing …","Extracts a parameter from a <code>Matches</code> object.","Macro to simplify the match logic for file generation.","The <code>generator</code> module contains functions for generating the …","The <code>generators</code> module contains functions for generating …","The <code>interface</code> module contains functions for displaying the …","A macro for generating ASCII art from text.","<code>macro_check_directory</code> Macro","<code>macro_cleanup_directories</code> Macro","<code>macro_create_directories</code> Macro","Executes a shell command and logs the start, completion, …","Attempts to generate file templates from the given …","Attempts to generate file templates from command-line …","Attempts to generate file templates from a configuration …","Attempts to generate file templates from a CSV file.","Attempts to generate file templates from a INI file.","Attempts to generate file templates from a JSON file.","Attempts to generate file templates from a TOML file.","Attempts to generate file templates from a YAML file.","Macro to generate a function that retrieves a field value …","Custom logging macro for various log levels and formats.","Replaces placeholders in a given line with corresponding …","The <code>macros</code> module contains functions for generating macros.","The <code>models</code> module contains the models for the library.","Initializes the logger with a file logger and a terminal …","The <code>utilities</code> module contains utility functions for the …","The <code>utils</code> module contains a function for reading a CSV …","Extracts the parameters for manual generation from command …","Processes the command line arguments provided to the …","Validates the manual generation parameters.","Constructs the command-line interface for the application …","Creates an argument based on provided information.","Copies a template file to the output directory and …","Creates the template folder and downloads necessary …","Generates files for a new Rust project based on given …","Generates files for a new Rust project based on a …","The <code>args</code> module contains functionality for parsing …","The <code>ascii</code> module contains functionality for generating …","The <code>csv</code> module contains functionality for parsing CSV …","The <code>ini</code> module contains functionality for parsing INI …","The <code>json</code> module contains functionality for parsing JSON …","The <code>toml</code> module contains functionality for parsing TOML …","The <code>yaml</code> module contains functionality for parsing YAML …","Generates files for a new Rust project based on command …","Generates ASCII art from the given text using the standard …","Loads the standard FIGfont.","Generates files for a new Rust project based on a CSV file.","Generates files for a new Rust project based on an INI …","Generates files for a new Rust project based on a JSON …","Generates files for a new Rust project based on a TOML …","Generates files for a new Rust project based on a YAML …","Replaces placeholders in a template file with values from …","A macro for generating ASCII art from text.","The <code>directory_macros</code> module contains macros related to …","The <code>file_macros</code> module contains macros related to file …","The <code>generator_macros</code> module contains macros related to …","The <code>log_macros</code> module contains macros related to logging …","The <code>utility_macros</code> module contains utility macros for …","The <code>ascii_art_error</code> module contains the <code>AsciiArtError</code> type …","The <code>model_params</code> module contains the <code>FileGenerationParams</code> …","Error type for ASCII art generation failures.","Represents a failure to convert text to ASCII art.","Represents a failure to load the FIGfont.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Structure for holding the parameters for generating the …","The author of the project (optional).","","","The build command to be used for building the project …","The categories that the project belongs to (optional).","","","","","","Creates a default instance with default values for all …","A short description of the project (optional).","","The documentation URL of the project (optional).","The edition of the project (optional).","The email address of the author (optional).","","","","","","Returns the argument unchanged.","Parses the command line arguments and returns a new …","","The homepage of the project (optional).","Calls <code>U::from(self)</code>.","Keywords that describe the project (optional).","The license under which the project is released (optional).","The name of the project (optional).","Parses the command line arguments and returns a new …","The output directory where the project files will be …","","The name of the readme file (optional).","The URL of the project’s repository (optional).","The minimum Rust version required by the project …","","","","","","The initial version of the project (optional).","","The website of the project (optional).","The <code>directory</code> module contains functions related to …","The <code>uuid</code> module contains functions related to generating …","Cleans up the directory at the given path.","Creates a new directory at the given path.","Ensures a directory exists, creating it if necessary.","Moves the output directory to the public directory.","Truncates a path to only have a set number of path …","Generates a unique string.","Creates a directory at the specified path.","Retrieves a specific field’s value from a configuration …","Reads a CSV file at the given file path and returns the …","Reads a file and deserializes its content using the …","Reads a file and deserializes its content using the …","Reads a file and deserializes its content using the …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"`````````````````````````{{}{{h{b{f{d}}}}}}``{j{{h{l{f{d}}}}}}{j{{h{b{f{d}}}}}}{l{{h{b{f{d}}}}}}{{}{{h{jn}}}}{{{Af{A`{Ab{A`}}A`AdA`A`}}}Ah}{{A`A`Ajl}{{Al{b}}}}{{}{{Al{b}}}}{l{{Al{b}}}}{{A`A`}{{h{bAn}}}}```````{A`{{Al{b}}}}{A`{{h{AnB`}}}}{{}{{h{BbB`}}}}22222{{AjAjl}{{Al{b}}}}```````````{ce{}{}}0{{B`Bd}Bf}0{cc{}}2{B`{{Ab{d}}}}{cAn{}}{c{{h{e}}}{}{}}0{cBh{}}6``66``{ll}{{ce}b{}{}}{{ll}Bj}{{ce}Bj{}{}}{{}l}0`{c{{h{l}}}Bl}```{{ll}Bn}{{ce}Bn{}{}}00{{lBd}Bf}={A`{{h{lAn}}}}{{lc}bC`}`{ce{}{}}```7`{{ll}{{Ab{Bj}}}}```{{lc}hCb}2??>`2```{{{Cf{Cd}}}{{h{b{f{d}}}}}}0{{CdA`}{{h{AnAn}}}}{{A`Cd}{{Al{b}}}}{{CdCh}{{Ab{An}}}}{{}An}{Cd{{Al{b}}}}{{{Ab{A`}}{Ab{A`}}A`}{{h{An{f{d}}}}}}{{{Ab{A`}}Ch}{{Ab{{Cj{An}}}}}}{{{Ab{A`}}A`}{{h{An{f{d}}}}}}00","c":[],"p":[[1,"unit"],[10,"Error",134],[5,"Box",135],[6,"Result",136],[5,"ArgMatches",137],[5,"FileGenerationParams",76],[5,"Error",138],[1,"str"],[6,"Option",139],[1,"char"],[1,"tuple"],[5,"Arg",140],[5,"PathBuf",141],[8,"Result",142],[5,"String",143],[6,"AsciiArtError",61],[5,"FIGfont",144],[5,"Formatter",145],[8,"Result",145],[5,"TypeId",146],[6,"Ordering",147],[10,"Deserializer",148],[1,"bool"],[10,"Hasher",149],[10,"Serializer",150],[5,"Path",141],[1,"slice"],[1,"usize"],[5,"Vec",151]],"b":[[66,"impl-Display-for-AsciiArtError"],[67,"impl-Debug-for-AsciiArtError"]]}],\
["xtask",{"doc":"This is the main entry point for the xtask crate.","t":"H","n":["main"],"q":[[0,"xtask"],[1,"anyhow"],[2,"core::result"]],"d":[""],"i":[0],"f":"{{}{{f{bd}}}}","c":[],"p":[[1,"unit"],[5,"Error",1],[6,"Result",2]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
