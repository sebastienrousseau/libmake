var searchIndex = JSON.parse('{\
"libmake":{"doc":"LibMake","t":"AAOOOOOOAAAAOOAFAFENNLLLLLFLLLLLLFDMLLMMLLLLFFFLLMLMMMLLLLLLLLFFFFFFFLMLMMMLMLMMMLLLLLMLMFNNNNNNNNNNNDEENNNNNLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLMMLLLLLLLLLLLLLLLLLFFFF","n":["args","ascii","assert_create_directory","assert_generate_files","assert_generate_from_config","assert_generate_from_csv","assert_generate_from_json","assert_generate_from_yaml","cli","generator","interface","loggers","macro_execute_and_log","macro_log_info","macros","run","utils","process_arguments","AsciiArtError","ConversionError","FontLoadError","borrow","borrow_mut","fmt","fmt","from","generate_ascii_art","into","to_string","try_from","try_into","type_id","vzip","build_cli","FileGenerationParams","author","borrow","borrow_mut","build","categories","clone","clone_into","cmp","compare","copy_and_replace_template","create_directory","create_template_folder","default","default_params","description","deserialize","documentation","edition","email","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_args","generate_files","generate_from_args","generate_from_config","generate_from_csv","generate_from_json","generate_from_toml","generate_from_yaml","hash","homepage","into","keywords","license","name","new","output","partial_cmp","readme","repository","rustversion","serialize","to_owned","try_from","try_into","type_id","version","vzip","website","replace_placeholders","ALL","CEF","CLF","DEBUG","DISABLED","ELF","ERROR","FATAL","GELF","INFO","JSON","Log","LogFormat","LogLevel","NONE","TRACE","VERBOSE","W3C","WARNING","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","component","default","description","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","format","from","from","from","hash","hash","hash","into","into","into","level","log","new","partial_cmp","partial_cmp","session_id","time","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","get_config_field","get_csv_field","get_json_field","get_yaml_field"],"q":[[0,"libmake"],[17,"libmake::args"],[18,"libmake::ascii"],[33,"libmake::cli"],[34,"libmake::generator"],[89,"libmake::interface"],[90,"libmake::loggers"],[178,"libmake::utils"]],"d":["The <code>args</code> module contains functions for processing …","The <code>ascii</code> module contains functions for generating ASCII …","Asserts that a directory is created at the given path.","Asserts that file templates are generated from the given …","Asserts that file templates are generated from a …","Asserts that file templates are generated from a CSV file.","Asserts that file templates are generated from a JSON file.","Asserts that file templates are generated from a YAML file.","The <code>cli</code> module contains functions for processing …","The <code>generator</code> module contains functions for generating the …","The <code>interface</code> module contains functions for displaying the …","The <code>loggers</code> module contains the loggers for the library.","Executes a shell command and logs the start, completion, …","Logs information with the specified level, component, and …","The <code>macros</code> module contains functions for generating macros.","Initializes the logger with a file logger and a terminal …","The <code>utils</code> module contains a function for reading a CSV …","Processes the command line arguments provided to the …","Error type for ASCII art generation failures.","Represents a failure to convert text to ASCII art.","Represents a failure to load the FIGfont.","","","","","Returns the argument unchanged.","Generates ASCII art from the given text using the standard …","Calls <code>U::from(self)</code>.","","","","","","Constructs the CLI for the application using Clap, …","Structure for holding the parameters for generating the …","The author of the project (optional).","","","The build command to be used for building the project …","The categories that the project belongs to (optional).","","","","","Copies a template file to the output directory and …","Creates a directory if it does not exist. If the directory …","Creates the template directory and downloads the template …","","Creates a default instance with default values for all …","A short description of the project (optional).","","The documentation URL of the project (optional).","The edition of the project (optional).","The email address of the author (optional).","","","","","","","Returns the argument unchanged.","Creates a new instance from the command line arguments.","Generates files for a new Rust project based on given …","Generates files for a new Rust project based on command …","Generates files for a new Rust project based on a …","Generates files for a new Rust project based on a CSV file.","Generates files for a new Rust project based on a JSON …","Generates files for a new Rust project based on a TOML …","Generates files for a new Rust project based on a YAML …","","The homepage of the project (optional).","Calls <code>U::from(self)</code>.","Keywords that describe the project (optional).","The license under which the project is released (optional).","The name of the project (optional).","Parses the command line arguments and returns a new …","The output directory where the project files will be …","","The name of the readme file (optional).","The URL of the project’s repository (optional).","The minimum Rust version required by the project …","","","","","","The initial version of the project (optional).","","The website of the project (optional).","Replaces placeholders in a template file with values from …","The log level is set to all.","The log format is set to the Common Event Format (CEF)","The log format is set to the Common Log Format (CLF)","The log level is set to debug.","The log level is set to disabled.","The log format is set to the Extended Log Format (ELF)","The log level is set to error.","The log level is set to fatal.","The log format is set to the Graylog Extended Log Format …","The log level is set to info.","The log format is set to the JSON format","Struct representing a log message.","Enum representing the different log formats that can be …","An enumeration of the different levels that a log message …","The log level is set to none.","The log level is set to trace.","The log level is set to verbose.","The log format is set to the W3C Extended Log File Format","The log level is set to warning.","","","","","","","","","","","","","A string that holds the component name.","","A string that holds the description of the log message.","","","","","","","","","","","","","","","","","","","","","A string that holds the log format.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A string that holds the level (INFO, WARN, ERROR, etc.).","Logs a message to the console using a pre-allocated buffer …","Creates a new <code>Log</code> instance.","","","A string that holds a session ID. The session ID is a …","A string that holds the timestamp in ISO 8601 format.","","","","","","","","","","","","","","","","","","Reads as Configuration file at the given file path, file …","Reads a CSV file at the given file path and returns the …","Reads a JSON file at the given file path and returns the …","Reads a YAML file at the given file path and returns the …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,0,5,5,5,5,5,5,0,0,12,12,12,12,12,12,12,12,12,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,23,22,22,23,23,22,23,23,22,23,22,0,0,0,23,23,23,22,23,22,23,24,22,23,24,22,23,24,22,23,24,24,24,24,22,23,24,22,22,22,22,23,23,23,23,24,24,24,24,22,22,23,23,24,24,22,23,24,22,23,24,22,23,24,24,24,24,22,23,24,24,22,23,24,22,23,22,23,24,22,23,24,22,23,24,22,23,24,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]],0,[4,[[3,[[2,[1]]]]]],0,0,0,[[]],[[]],[[5,6],7],[[5,6],7],[[]],[8,[[3,[9,5]]]],[[]],[[],9],[[],3],[[],3],[[],10],[[]],[[],[[3,[4,11]]]],0,0,[[]],[[]],0,0,[12,12],[[]],[[12,12],13],[[],13],[[8,8,14,12],15],[16,15],[[],15],[[],12],[[],12],0,[17,[[3,[12]]]],0,0,0,[[12,12],18],[[],18],[[],18],[[],18],[[],18],[[12,6],7],[[]],[8,[[3,[12,9]]]],[12,15],[8,15],[[8,8],15],[8,15],[8,15],[8,15],[8,15],[[12,19]],0,[[]],0,0,0,[[],12],0,[[12,12],[[20,[13]]]],0,0,0,[[12,21],3],[[]],[[],3],[[],3],[[],10],0,[[]],0,[[14,14,12],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[22,22],[23,23],[24,24],[[]],[[]],[[]],0,[[],24],0,[[22,22],18],[[23,23],18],[[24,24],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[22,6],7],[[22,6],7],[[23,6],7],[[23,6],7],[[24,6],7],0,[[]],[[]],[[]],[[22,19]],[[23,19]],[[24,19]],[[]],[[]],[[]],0,[24,15],[[8,8,23,8,8,22],24],[[22,22],[[20,[13]]]],[[23,23],[[20,[13]]]],0,0,[[]],[[]],[[]],[[],9],[[],9],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[[20,[8]],[20,[8]],8],9],[[[20,[8]],25],[[20,[[26,[9]]]]]],[[[20,[8]],8],9],[[[20,[8]],8],9]],"c":[],"p":[[8,"Error"],[3,"Box"],[4,"Result"],[3,"ArgMatches"],[4,"AsciiArtError"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"String"],[3,"TypeId"],[6,"Error"],[3,"FileGenerationParams"],[4,"Ordering"],[3,"PathBuf"],[6,"Result"],[3,"Path"],[8,"Deserializer"],[15,"bool"],[8,"Hasher"],[4,"Option"],[8,"Serializer"],[4,"LogFormat"],[4,"LogLevel"],[3,"Log"],[15,"usize"],[3,"Vec"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
