name: 🧪 Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, reopened, synchronize]

defaults:
  run:
    shell: bash

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read

jobs:
  # Build the project for all the targets and generate artifacts.
  build:
    # This job builds the project for all the targets and generates a
    # release artifact that contains the binaries for all the targets.
    name: ❯ Build 🛠
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        rust_toolchain: [stable]
        rust_target:
          [
            x86_64-unknown-linux-gnu,
            x86_64-pc-windows-msvc,
            x86_64-apple-darwin,
          ]
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup Rust environment
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust_toolchain }}
          target: ${{ matrix.rust_target }}
          override: true

      - name: Install apt packages
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get install musl-tools libssl-dev

      - name: Build
        run: |
          cargo clean && cargo build --target=${{ matrix.rust_target }} --release

      - name: Update version number 🧮
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: bash -e {0}

      - name: Save build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: libmake-${{ matrix.rust_target }}
          path: target/${{ matrix.rust_target }}/release/

      - name: Generate Changelog 📜
        if: github.ref == 'refs/heads/main'
        run: |
          # Append version information to CHANGELOG.md
          echo "## [${{ env.VERSION }}] - $(date +'%Y-%m-%d')" >> ${{ github.workspace }}/CHANGELOG.md
          # Append git log to CHANGELOG.md
          git log --pretty=format:'- %s (%h)' --reverse $(git describe --tags --abbrev=0)..HEAD >> ${{ github.workspace }}/CHANGELOG.md
          # Append empty line to CHANGELOG.md
          echo "" >> ${{ github.workspace }}/CHANGELOG.md

      - name: Create Release 🚀
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: LibMake v${{ env.VERSION }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: false
          prerelease: false

  # Publish the release to Crates.io automatically
  crate:
    name: ❯ Crate.io 🦀
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - name: Checkout
        uses: actions/checkout@v3

      # Install the stable Rust toolchain
      - name: Install stable toolchain
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Cache dependencies to speed up subsequent builds
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/.cargo/registry/index/
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> "$GITHUB_ENV"
        shell: /bin/bash -e {0}

      # Log in to crates.io
      - name: Log in to crates.io
        id: login-crate-io
        run: cargo login ${{ secrets.CARGO_API_TOKEN }}

      # Publish the Rust library to Crate.io
      - name: Publish Library to Crate.io
        id: publish-library
        uses: actions-rs/cargo@v1
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_API_TOKEN }}
        with:
          command: publish
          args: "--no-verify --allow-dirty"
          use-cross: false
