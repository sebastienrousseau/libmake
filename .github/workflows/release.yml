name: 🧪 Release

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: read

jobs:
  # This job builds the project for Linux
  build:
    name: ❯ build
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        rust-toolchain:
          - stable
        target:
          # 64-bit macOS on Apple Silicon ✅ Tested
          - aarch64-apple-darwin

    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - name: Checkout sources
        id: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # Install the stable Rust toolchain
      - name: Setup Rust
        id: setup-rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          rustup default ${{ matrix.rust-toolchain }}

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      # Build the targets for Linux
      - name: Build targets
        id: build-targets
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }} --verbose --workspace

      # Upload the binary for the target
      - name: Upload binary to GitHub Packages
        uses: actions/upload-artifact@v2
        with:
          name: libmake-${{ matrix.target }}-v${{ env.VERSION }}
          path: target/release/libmake

      # Tar the binary for the target
      - name: Tar files
        run: tar -czvf libmake-${{ matrix.target }}-v${{ env.VERSION }}.tar.gz target/release/libmake

      # Upload the tarball for the target
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: libmake v${{ env.VERSION }}
          path: libmake-${{ matrix.target }}-v${{ env.VERSION }}.tar.gz
          run: |
            echo "Binary uploaded successfully for ${{ matrix.target }}. URL: ${{ steps.upload-artifact.outputs.artifact_url }}"
          shell: /bin/bash -e {0}

  # Release the binary to GitHub Releases
  release:
    name: ❯ Release 🚀
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - name: Checkout sources
        uses: actions/checkout@v3

      # Install the stable Rust toolchain
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> "$GITHUB_ENV"
        shell: /bin/bash -e {0}

      # Cache dependencies to speed up subsequent builds
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      # Download the artifacts from the build job
      - name: Download artifacts
        run: |
          for target in ${{ matrix.target }}; do
            echo "Downloading $target artifact"
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              name="${target}.zip"
            else
              name="${target}.tar.gz"
            fi
            echo "Artifact name: $name"
            mkdir -p target/package
            curl -sSL -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" -L "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}/artifacts/${name}" -o "target/package/${name}"
          done

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Generate the changelog based on git log and template file
      - name: Generate Changelog
        run: |
          # Append version information to CHANGELOG.md
          echo "## Release v${{ env.VERSION }} - $(date +'%Y-%m-%d')" >> ${{ github.workspace }}/CHANGELOG.md
          # Copy content of template file to CHANGELOG.md
          cat TEMPLATE.md >> ${{ github.workspace }}/CHANGELOG.md
          # Append git log to CHANGELOG.md
          echo "$(git log --pretty=format:'%s' --reverse $(git describe --tags --abbrev=0)..HEAD)" >> ${{ github.workspace }}/CHANGELOG.md
          # Append empty line to CHANGELOG.md
          echo "" >> ${{ github.workspace }}/CHANGELOG.md

      # Append the artifact links to the changelog
      - name: Append Artifact Links
        run: |
          echo "" >> ${{ github.workspace }}/CHANGELOG.md
          echo "## Artifacts 🎁" >> ${{ github.workspace }}/CHANGELOG.md
          for filename in target/package/*.tar.gz; do
            link="$(basename $filename)"
            echo "* [${link}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/download/v${{ env.VERSION }}/$link)" >> ${{ github.workspace }}/CHANGELOG.md
          done

      # Create the release on GitHub Releases
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1

  # Publish the release to Crates.io automatically
  crate:
    name: ❯ Crate.io 🦀
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: release
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - name: Checkout
        uses: actions/checkout@v3

      # Install the stable Rust toolchain
      - name: Install stable toolchain
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Cache dependencies to speed up subsequent builds
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: /home/runner/.cargo/registry/index/
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> "$GITHUB_ENV"
        shell: /bin/bash -e {0}

      # Log in to crates.io
      - name: Log in to crates.io
        id: login-crate-io
        run: cargo login ${{ secrets.CARGO_API_TOKEN }}

      # Publish the Rust library to Crate.io
      - name: Publish Library to Crate.io
        id: publish-library
        uses: actions-rs/cargo@v1
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_API_TOKEN }}
        with:
          command: publish
          args: "--no-verify --allow-dirty"
          use-cross: false
