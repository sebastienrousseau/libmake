name: ðŸ§ª Release

env:
  PROJECT_NAME: libmake

on: [push, pull_request]

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build: [x86_64-linux, x86_64-macos, aarch64-macos, x86_64-windows] #, x86_64-win-gnu, win32-msvc aarch64-linux,
        include:
          - build: x86_64-linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
          - build: x86_64-windows
            os: windows-2019
            rust: stable
            target: x86_64-pc-windows-msvc
            cross: false
          - build: aarch64-macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Install OpenSSL
        if: matrix.build == 'aarch64-linux'
        run: sudo apt-get install libssl-dev pkg-config

      - name: Build release library
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }} --package $PROJECT_NAME

      - name: Copy library to dist
        run: |
          mkdir -p dist/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/$PROJECT_NAME.rlib dist/${{ matrix.target }}

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: libs-${{ matrix.build }}
          path: dist

  publish:
    name: Publish library
    runs-on: ubuntu-latest
    needs: dist
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Install OpenSSL
        if: matrix.build == 'aarch64-linux'
        run: sudo apt-get install libssl-dev pkg-config

      - name: Build release library
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }} --package $PROJECT_NAME

      - name: Copy library to dist
        run: |
          mkdir -p dist/${{ matrix.target }}
          cp target/${{ matrix.target }}/release/$PROJECT_NAME.rlib dist/${{ matrix.target }}

      - uses: actions/upload-artifact@v2.2.4
        with:
          name: libs-${{ matrix.build }}
          path: dist

      - name: Publish library to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          token: ${{ secrets.CRATES_IO_TOKEN }}
          package: $PROJECT_NAME
          all-features: true

      # Log in to crates.io
      - name: Log in to crates.io
        id: login-crate-io
        run: cargo login ${{ secrets.CARGO_API_TOKEN }}

      # Publish the Rust library to Crate.io
      - name: Publish Library to Crate.io
        id: publish-library
        uses: actions-rs/cargo@v1
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_API_TOKEN }}
        with:
          command: publish
          args: "--no-verify --allow-dirty"
          use-cross: false
