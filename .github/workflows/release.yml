name: 🧪 Release

env:
  PROJECT_NAME: libmake

on:
  push:
  pull_request:

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build: [x86_64-linux, x86_64-macos, aarch64-macos, x86_64-windows] #, x86_64-win-gnu, win32-msvc aarch64-linux,
        include:
          - build: x86_64-linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          - build: x86_64-macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            cross: false
          - build: x86_64-windows
            os: windows-2019
            rust: stable
            target: x86_64-pc-windows-msvc
            cross: false
          - build: aarch64-macos
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin

    steps:
      # Checkout the source code
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      # Install Rust toolchain
      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      # Install OpenSSL
      - name: Install OpenSSL
        if: matrix.build == 'aarch64-linux'
        run: sudo apt-get install libssl-dev pkg-config

      # Build the library
      - name: Build release library
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.cross }}
          command: build
          args: --release --target ${{ matrix.target }} --package libmake

      # Package the binary for each target
      - name: Package the binary
        id: package-binary
        run: |
          mkdir -p target/package
          tar czf target/package/${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .
          echo "${{ matrix.target }}.tar.gz=target/package/${{ matrix.target }}.tar.gz" >> $GITHUB_ENV
        shell: bash

      # Upload the library as an artifact
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: libs-${{ matrix.build }}
          path: target/package

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "::set-output name=VERSION::$NEW_VERSION"
        shell: bash

      # Download the artifacts from the build job
      - name: Download artifacts
        run: |
          targets=("x86_64-unknown-linux-gnu" "x86_64-pc-windows-gnu" "x86_64-apple-darwin")
          for target in "${targets[@]}"; do
            echo "Downloading $target artifact"
            name="${target}.tar.gz"
            echo "Artifact name: $name"
            mkdir -p target/package
            curl -sSL -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" -L "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/runs/${{ github.run_id }}/artifacts/${name}" -o "target/package/${name}"
          done
        shell: bash

      # Generate the changelog based on the git log
      - name: Generate Changelog
        id: generate-changelog
        env:
          BUILD_ID: ${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_URL: https://github.com/sebastienrousseau/libmake/releases

        run: |
          if [[ ! -f CHANGELOG.md ]]; then
            # Set path to changelog file
            changelog_file="${{ github.workspace }}/CHANGELOG.md"

            # Get version from Cargo.toml
            version=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)

            # Append version information to changelog
            echo "## Release v${version} - $(date +'%Y-%m-%d')" >> "${changelog_file}"

            # Copy content of template file to changelog
            cat TEMPLATE.md >> "${changelog_file}"

            # Append git log to changelog
            echo "$(git log --pretty=format:'%s' --reverse HEAD)" >> "${changelog_file}"

            # Append empty line to changelog
            echo "" >> "${changelog_file}"

            # Append artifact links to changelog
            echo "## Artifacts 🎁" >> "${changelog_file}"
            targets=("x86_64-unknown-linux-gnu" "x86_64-pc-windows-gnu" "x86_64-apple-darwin")
            for target in "${targets[@]}"; do
              link="${target}.tar.gz"
              echo "* [${link}](${RELEASE_URL}/download/v${{ steps.update-version.outputs.VERSION }}/${link})" >> "${changelog_file}"
            done
          fi
        shell: bash

      # Create the release on GitHub releases
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.update-version.outputs.VERSION }}
          release_name: LibMake - A Rust Code generator library 🦀
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: true
          prerelease: false
