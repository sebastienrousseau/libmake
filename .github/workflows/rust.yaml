name: ❯ LibMake Release

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build-project:
    name: Build project 🛠️
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository 🛎️
        id: run-checkout-repository
        uses: actions/checkout@v3
        with: { submodules: true }

      - name: Installing Rust 🦀
        id: run-install-rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        shell: /bin/bash -e {0}

      - name: Update version number 🧮
        id: run-update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      - name: Install Cross 🦀
        id: run-install-cross
        run: |
          # Install cross
          cargo install cross
          # Clean the build artifacts
          cargo clean --verbose
        shell: /bin/bash -e {0}

      - name: Run Cargo Format 🦀
        id: run-check-format
        run: |
          cargo check --all --all-features --release --verbose

      - name: Run Clippy 🦀
        id: run-check-clippy
        run: |
          cargo clippy --all-targets --all-features --release -- -D warnings

      - name: Run Cargo Doc 🦀
        id: run-check-doc
        run: |
          cargo doc --color always --no-deps --all-features --release --verbose

      - name: Run Cargo Test 🦀
        id: run-check-test
        run: |
          cargo test --all-targets --workspace --all-features

      # - name: Run Cargo Code Coverage 🦀
      #   id: run-check-code-coverage
      #   run: |
      #     # Install tarpaulin
      #     cargo install cargo-tarpaulin
      #     # Run tarpaulin and generate the code coverage report
      #     cargo tarpaulin --all --all-features --workspace --out Xml

      # - name: Upload to codecov.io 📊
      #   id: run-upload-codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     fail_ci_if_error: false
      #     verbose: true

  # build-targets:
  #   name: Build targets 🛠️
  #   runs-on: ubuntu-latest
  #   needs: build-project
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target:
  #         # Linux targets 🐧
  #         - aarch64-unknown-linux-gnu # 64-bit Linux systems on ARM architecture                ✅ Tested
  #         - aarch64-unknown-linux-musl # 64-bit Linux systems on ARM architecture               ✅ Tested
  #         - arm-unknown-linux-gnueabi # ARMv6 Linux (kernel 3.2, glibc 2.17)                    ✅ Tested
  #         - armv7-unknown-linux-gnueabihf # ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)     ✅ Tested
  #         - i686-unknown-linux-gnu # 32-bit Linux (kernel 3.2+, glibc 2.17+)                    ✅ Tested
  #         - i686-unknown-linux-musl # 32-bit Linux (kernel 3.2+, musl libc)                     ✅ Tested
  #         - x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)               ✅ Tested
  #         - x86_64-unknown-linux-musl # 64-bit Linux (kernel 2.6.32+, musl libc)                ✅ Tested

  #         # macOS targets 🍎
  #         - x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)                             ✅ Tested

  #       include:
  #         # Linux targets 🐧
  #         - target: aarch64-unknown-linux-gnu # 64-bit Linux systems on ARM architecture
  #           os: ubuntu-latest
  #           cross: true
  #         - target: aarch64-unknown-linux-musl # 64-bit Linux systems on ARM architecture
  #           os: ubuntu-latest
  #           cross: true
  #         - target: arm-unknown-linux-gnueabi # ARMv6 Linux (kernel 3.2, glibc 2.17)
  #           os: ubuntu-latest
  #           cross: true
  #         - target: armv7-unknown-linux-gnueabihf # ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)
  #           os: ubuntu-latest
  #           cross: true
  #         - target: i686-unknown-linux-gnu # 32-bit Linux (kernel 3.2+, glibc 2.17+)
  #           os: ubuntu-latest
  #           cross: true
  #         - target: i686-unknown-linux-musl # 32-bit Linux (kernel 3.2+, musl libc)
  #           os: ubuntu-latest
  #           cross: true
  #         - target: x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)
  #           os: ubuntu-latest
  #           cross: true
  #         - target: x86_64-unknown-linux-musl # 64-bit Linux (kernel 2.6.32+, musl libc)
  #           os: ubuntu-latest
  #           cross: true

  #         # macOS targets 🍎
  #         - target: x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)
  #           os: macos-latest
  #           cross: true

  #     max-parallel: 4

  #   steps:
  #     - name: Checkout repository 🛎️
  #       id: checkout-repository
  #       uses: actions/checkout@v3
  #       with: { submodules: true }

  #     - name: Installing Rust 🦀
  #       id: install-rust
  #       run: |
  #         curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  #       shell: /bin/bash -e {0}

  #     - name: Update version number 🧮
  #       id: update-version
  #       run: |
  #         NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
  #         echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
  #       shell: /bin/bash -e {0}

  #     - name: Install Cross 🦀
  #       id: install-cross
  #       run: |
  #         # Install cross
  #         cargo install cross
  #         # Clean the build artifacts
  #         cargo clean --verbose
  #       shell: /bin/bash -e {0}

  #     - name: Build targets 🏗
  #       id: build-targets
  #       uses: actions-rs/cargo@v1
  #       with:
  #         use-cross: true
  #         command: build
  #         args: --verbose --release --target ${{ matrix.target }}

  #     - name: Package the binary 📦
  #       id: package-binary
  #       run: |
  #         mkdir -p target/package
  #         tar czf target/package/${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .

  #     - name: Create Release 🚀
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: v${{ env.VERSION }}
  #         release_name: LibMake 🦀 v${{ env.VERSION }}
  #         body_path: ${{ github.workspace }}/README.md
  #         draft: true
  #         prerelease: false

  #     - name: Deploy binary 🚀
  #       id: deploy-binary
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ matrix.target }}.tar.gz
  #         path: target/package/${{ matrix.target }}.tar.gz

  #     - name: Upload Release Asset 📦
  #       id: upload_release_asset
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }}
  #         asset_path: ${{ github.workspace }}/target/package/${{ matrix.target }}.tar.gz
  #         asset_name: ${{ matrix.target }}.tar.gz
  #         asset_content_type: application/gzip

  # deploy-release:
  #   runs-on: ubuntu-latest
  #   name: Deploy Release 🚀
  #   needs: build-targets
  #   steps:
  #     - name: Checkout repository 🛎️
  #       id: run-checkout-repository
  #       uses: actions/checkout@v3
  #       with: { submodules: true }

  #     - name: Update version number 🧮
  #       id: run-update-version
  #       run: |
  #         NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
  #         echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
  #       shell: /bin/bash -e {0}

  #     - name: Create Release 🚀
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: v${{ env.VERSION }}
  #         release_name: Hash (HSH) 🦀 v${{ env.VERSION }}
  #         body_path: ${{ github.workspace }}/README.md
  #         draft: true
  #         prerelease: false


      # - name: Publish to Crates.io 🚀
      #   id: publish-crates
      #   if: github.ref == 'refs/heads/main'
      #   uses: actions-rs/cargo@v1
      #   with:
      #     use-cross: true
      #     command: publish
      #     args: --token ${{ secrets.CARGO_TOKEN }} --verbose