name: ❯ LibMake Release

on:
  pull_request:
  push:
    branches:
      - feat/*
  # you can enable a schedule to build
  # schedule:
  # - cron: '00 01 * * *'

jobs:
  check:
    name: ❯ Check 💵
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-targets --workspace --all-features

  test:
    name: ❯ Test 🧪
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - uses: taiki-e/install-action@cargo-hack
        id: install-cargo-hack

      - if: github.ref == 'refs/heads/main'
        run: cargo test --all-targets --workspace --all-features

  coverage:
    name: ❯ Coverage 📊
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: llvm-tools-preview

      - uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - run: |
          mkdir -p "${HOME}/.local/bin"
          curl -sL https://github.com/mozilla/grcov/releases/download/v0.8.13/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf - -C "${HOME}/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        id: download-grcov

      - uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: coverage

      - uses: codecov/codecov-action@v3
        with:
          files: coverage/*.lcov

  lints:
    name: ❯ Lints 🧹
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run cargo clippy
        if: github.ref == !github.event.check_run.conclusion
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

  build:
    name: ❯ Build 🛠
    strategy:
      fail-fast: false
      matrix:
        target:
          # List of targets: https://doc.rust-lang.org/nightly/rustc/platform-support.html

          # FreeBSD targets 🐬
          - x86_64-unknown-freebsd # 64-bit FreeBSD on x86-64                                     ✅ Tested

          # Linux targets 🐧
          - aarch64-unknown-linux-gnu # 64-bit Linux systems on ARM architecture                  ✅ Tested
          - aarch64-unknown-linux-musl # 64-bit Linux systems on ARM architecture                 ✅ Tested
          - arm-unknown-linux-gnueabi # ARMv6 Linux (kernel 3.2, glibc 2.17)                      ✅ Tested
          - armv7-unknown-linux-gnueabihf # ARMv7 Linux, hardfloat (kernel 3.2, glibc 2.17)       ✅ Tested
          - i686-unknown-linux-gnu # 32-bit Linux (kernel 3.2+, glibc 2.17+)                      ✅ Tested
          - i686-unknown-linux-musl # 32-bit Linux (kernel 3.2+, musl libc)                       ✅ Tested
          - x86_64-unknown-linux-gnu # 64-bit Linux (kernel 2.6.32+, glibc 2.11+)                 ✅ Tested
          - x86_64-unknown-linux-musl # 64-bit Linux (kernel 2.6.32+, musl libc)                  ✅ Tested

          # macOS targets 🍎
          - aarch64-apple-darwin # 64-bit macOS on Apple Silicon                                  ✅ Tested
          - x86_64-apple-darwin # 64-bit macOS (10.7 Lion or later)                               ✅ Tested

          # NetBSD targets 🐇
          - aarch64-unknown-netbsd # 64-bit NetBSD on ARMv8 architecture                      ✅ Tested
          - x86_64-unknown-netbsd # 64-bit NetBSD on x86-64

        include:
          # FreeBSD targets 🐬
          - target: x86_64-unknown-freebsd
            os: ubuntu-latest
            cross: true

          # Linux targets 🐧
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: arm-unknown-linux-gnueabi
            os: ubuntu-latest
            cross: true
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: i686-unknown-linux-musl
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            cross: true

          # macOS targets 🍎
          - target: aarch64-apple-darwin
            os: macos-latest
            cross: true
          - target: x86_64-apple-darwin
            os: macos-latest
            cross: true

          # NetBSD targets 🐇
          - target: aarch64-unknown-netbsd
            os: ubuntu-latest
            cross: true
          - target: x86_64-unknown-netbsd
            os: ubuntu-latest
            cross: true

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources 📥
        id: checkout
        uses: actions/checkout@v3

      - name: Install stable toolchain 🛠️
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies 📦
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install target 🦀
        id: install-target
        run: rustup target add ${{ matrix.target }}

      - name: Update version number 🧮
        id: update-version
        # if: github.ref == 'refs/heads/main' && !github.event.check_run.conclusion
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      - name: Install Cross 🦀
        id: install-cross
        run: |
          # Install cross
          cargo install cross
          # Clean the build artifacts
          cargo clean --verbose
        shell: /bin/bash -e {0}

      - name: Build targets 🏗
        id: build-targets
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --workspace --release --target ${{ matrix.target }}

      - name: Run Cargo Format 🦀
        id: run-check-format
        if: github.ref == !github.event.check_run.conclusion
        run: |
          cargo check --all --all-features --workspace --verbose
      - name: Run Clippy 🦀
        id: run-check-clippy
        if: github.ref == !github.event.check_run.conclusion
        run: |
          cargo clippy --all-targets --all-features --workspace -- -D warnings

      - name: Package the binary 📦
        id: package-binary
        run: |
          mkdir -p target/package
          tar czf target/package/${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .
          echo "${{ matrix.target }}.tar.gz=target/package/${{ matrix.target }}.tar.gz" >> $GITHUB_ENV

  release:
    name: ❯ Release 🚀
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Update version number
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Download artifacts
        run: |
          for target in aarch64-unknown-linux-gnu aarch64-unknown-linux-musl arm-unknown-linux-gnueabi armv7-unknown-linux-gnueabihf i686-unknown-linux-gnu i686-unknown-linux-musl x86_64-unknown-linux-gnu x86_64-unknown-linux-musl x86_64-apple-darwin; do
            echo "Downloading $target artifact"
            name="${target}.tar.gz"
            echo "Artifact name: $name"
            mkdir -p target/package
            curl -sSL -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" -L "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/runs/${RUN_ID}/artifacts/${name}" -o "target/package/${name}"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.event.workflow_run.id }}

      - name: Generate Changelog
        run: |
          # Append version information to CHANGELOG.md
          echo "## Release v${{ env.VERSION }} - $(date +'%Y-%m-%d')" >> ${{ github.workspace }}/CHANGELOG.md
          # Copy content of template file to CHANGELOG.md
          cat TEMPLATE.md >> ${{ github.workspace }}/CHANGELOG.md
          # Append git log to CHANGELOG.md
          echo "$(git log --pretty=format:'%s' --reverse $(git describe --tags --abbrev=0)..HEAD)" >> ${{ github.workspace }}/CHANGELOG.md
          # Append empty line to CHANGELOG.md
          echo "" >> ${{ github.workspace }}/CHANGELOG.md

      - name: Append Artifact Links
        run: |
          echo "" >> ${{ github.workspace }}/CHANGELOG.md
          echo "## Artifacts 🎁" >> ${{ github.workspace }}/CHANGELOG.md
          for filename in target/package/*.tar.gz; do
            link="$(basename $filename)"
            echo "* [$link](${{ github.server_url }}/${{ github.repository }}/releases/download/v${{ env.VERSION }}/$link)" >> ${{ github.workspace }}/CHANGELOG.md
          done

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: LibMake 🦀 v${{ env.VERSION }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: true
          prerelease: false


