name: ❯ LibMake Release

on:
  pull_request:
  push:
    branches:
      - feat/*
  # you can enable a schedule to build
  # schedule:
  # - cron: '00 01 * * *'

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite 🦀
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - uses: taiki-e/install-action@cargo-hack
        id: install-cargo-hack

      - if: github.ref == 'refs/heads/main'
        run: cargo test --all-targets --workspace --all-features

  coverage:
    name: Coverage 🧪
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: llvm-tools-preview

      - uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - run: |
          mkdir -p "${HOME}/.local/bin"
          curl -sL https://github.com/mozilla/grcov/releases/download/v0.8.13/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf - -C "${HOME}/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        id: download-grcov

      - uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: coverage

      - uses: codecov/codecov-action@v3
        with:
          files: coverage/*.lcov

  lints:
    name: Lints
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run cargo clippy
        if: github.ref == !github.event.check_run.conclusion
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - rust: stable
            target: aarch64-unknown-linux-gnu
          - rust: stable
            target: i686-pc-windows-gnu
          - rust: stable
            target: i686-pc-windows-msvc
          - rust: stable
            target: i686-unknown-linux-gnu
          - rust: stable
            target: x86_64-apple-darwin
          - rust: stable
            target: x86_64-pc-windows-gnu
          - rust: stable
            target: x86_64-pc-windows-msvc
          - rust: stable
            target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout sources 📥
        id: checkout
        uses: actions/checkout@v2

      - name: Install stable toolchain 🛠️
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies 📦
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install target 🦀
        id: install-target
        run: rustup target add ${{ matrix.target }}

      - name: Update version number 🧮
        id: update-version
        # if: github.ref == 'refs/heads/main' && !github.event.check_run.conclusion
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      - name: Install Cross 🦀
        id: install-cross
        run: |
          # Install cross
          cargo install cross
          # Clean the build artifacts
          cargo clean --verbose
        shell: /bin/bash -e {0}

      - name: Build targets 🏗
        id: build-targets
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --workspace --release --target ${{ matrix.target }}

      - name: Run Cargo Format 🦀
        id: run-check-format
        if: github.ref == !github.event.check_run.conclusion
        run: |
          cargo check --all --all-features --workspace --verbose
      - name: Run Clippy 🦀
        id: run-check-clippy
        if: github.ref == !github.event.check_run.conclusion
        run: |
          cargo clippy --all-targets --all-features --workspace -- -D warnings
      - name: Package the binary 📦
        id: package-binary
        run: |
          mkdir -p target/package
          tar czf target/package/${{ matrix.target }}.tar.gz -C target/${{ matrix.target }}/release .
          echo "* [${{ matrix.target }}.tar.gz

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources 📥
        uses: actions/checkout@v2

      - name: Install stable toolchain 🛠️
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Update version number 🧮
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      - name: Cache dependencies 📦
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Download artifacts 📥
        run: |
          for target in aarch64-unknown-linux-gnu aarch64-unknown-linux-musl arm-unknown-linux-gnueabi armv7-unknown-linux-gnueabihf i686-unknown-linux-gnu i686-unknown-linux-musl x86_64-unknown-linux-gnu x86_64-unknown-linux-musl x86_64-apple-darwin; do
            echo "Downloading $target artifact"
            name="${target}.tar.gz"
            echo "Artifact name: $name"
            mkdir -p target/package
            curl -sSL -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" -L "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/runs/${RUN_ID}/artifacts/${name}" -o "target/package/${name}"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.event.workflow_run.id }}

      - name: Generate Changelog 📜
        run: |
          # Append version information to CHANGELOG.md
          echo "## [${{ env.VERSION }}] - $(date +'%Y-%m-%d')" >> ${{ github.workspace }}/CHANGELOG.md
          # Copy content of template file to CHANGELOG.md
          cat TEMPLATE.md >> ${{ github.workspace }}/CHANGELOG.md
          # Append git log to CHANGELOG.md
          echo "$(git log --pretty=format:'%s' --reverse $(git describe --tags --abbrev=0)..HEAD)" >> ${{ github.workspace }}/CHANGELOG.md
          # Append empty line to CHANGELOG.md
          echo "" >> ${{ github.workspace }}/CHANGELOG.md

      - name: Append Artifact Links 📝
        run: |
          echo "" >> ${{ github.workspace }}/CHANGELOG.md
          echo "## Uploaded Artifacts 🎁" >> ${{ github.workspace }}/CHANGELOG.md
          for filename in target/package/*.tar.gz; do
            link="$(basename $filename)"
            echo "* [$link](${{ github.server_url }}/${{ github.repository }}/releases/download/v${{ env.VERSION }}/$link)" >> ${{ github.workspace }}/CHANGELOG.md
          done

      - name: Create Release 🚀
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: LibMake 🦀 v${{ env.VERSION }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: true
          prerelease: false


