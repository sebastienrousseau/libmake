name: Build
on:
  pull_request:
  push:
    branches:
      - feat/*
  # you can enable a schedule to build
  # schedule:
  # - cron: '00 01 * * *'

jobs:
  check:
    name: Check
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Test Suite
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack

      - name: Run Cargo Test 🦀
        id: run-check-test
        run: |
          cargo test --target ${{ matrix.target }} --workspace --all-features

  build:
    name: Build and Package
    strategy:
      fail-fast: false
      matrix:
        include:
        # Linux targets 🐧
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
        - os: ubuntu-latest
          target: aarch64-unknown-linux-gnu
        - os: ubuntu-latest
          target: armv7-unknown-linux-gnueabihf
        - os: ubuntu-latest
          target: i686-unknown-linux-gnu
        # macOS targets 🍎
        - os: macos-latest
          target: x86_64-apple-darwin
        - os: macos-latest
          target: aarch64-apple-darwin
        # Windows targets 🖥️
        - os: windows-latest
          target: x86_64-pc-windows-msvc
        - os: windows-latest
          target: i686-pc-windows-msvc
        # Raspberry Pi targets 🍓
        - os: ubuntu-latest
          target: armv7-unknown-linux-gnueabihf
        - os: ubuntu-latest
          target: aarch64-unknown-linux-gnu
        # FreeBSD targets 🐬
        - os: freebsd-latest
          target: x86_64-unknown-freebsd
        # NixOS targets 🐧
        - os: nixos-latest
          target: x86_64-unknown-linux-gnu
    runs-on: ${{ matrix.os }}

    steps:
      - name: Install dependencies
        if: startsWith(matrix.target, 'arm')
        run: |
          sudo apt-get update
          sudo apt-get install -y libbz2-dev gcc-arm-linux-gnueabihf

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Install aarch64 toolchain
        run: rustup target add aarch64-unknown-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu' # Only for the aarch64 target

      - name: Install GCC for ARM64
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
        if: matrix.target == 'aarch64-unknown-linux-gnu' # Only for the aarch64 target

      - name: Install libbz2-dev
        run: sudo apt-get install libbz2-dev
        if: matrix.target == 'armv7-unknown-linux-gnueabihf' # Only for the armv7 target

      - name: Build library
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package library
        run: cargo package --allow-dirty
        env:
          CARGO_HOME: ${{ runner.workspace }}/.cargo
        working-directory: .

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: target/package/*.crate

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            target/package/*.crate

  coverage:
    name: Coverage
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: llvm-tools-preview

      - uses: Swatinem/rust-cache@v1

      - name: Download grcov
        run: |
          mkdir -p "${HOME}/.local/bin"
          curl -sL https://github.com/mozilla/grcov/releases/download/v0.8.13/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf - -C "${HOME}/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Run xtask coverage
        uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: coverage

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: coverage/*.lcov

  lints:
    name: Lints
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: stable
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Run cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

