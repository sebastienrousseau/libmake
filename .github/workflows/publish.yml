name: 🧪 Publish

on:
  push:
    branches: [main]

jobs:
  publish:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - name: Checkout sources
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      # Install the stable Rust toolchain
      - name: Setup Rust
        id: setup-rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          rustup default ${{ matrix.rust-toolchain }}

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      # Install grcov
      - name: Install grcov
        run: |
          mkdir -p "${HOME}/.local/bin"
          curl -sL https://github.com/mozilla/grcov/releases/download/v0.8.13/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxf - -C "${HOME}/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Use grcov to generate a coverage report
      - name: Generate coverage report
        id: coverage
        uses: actions-rs/cargo@v1
        with:
          command: xtask
          args: coverage

      # Upload the coverage report to codecov
      - name: Upload coverage report to codecov
        id: codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage/*.lcov

      # Generate the changelog based on git log and template file
      - name: Generate Changelog
        run: |
          # Append version information to CHANGELOG.md
          echo "## Release v${{ env.VERSION }} - $(date +'%Y-%m-%d')" >> ${{ github.workspace }}/CHANGELOG.md
          # Copy content of template file to CHANGELOG.md
          cat TEMPLATE.md >> ${{ github.workspace }}/CHANGELOG.md
          # Append git log to CHANGELOG.md
          echo "$(git log --pretty=format:'%s' --reverse $(git describe --tags --abbrev=0)..HEAD)" >> ${{ github.workspace }}/CHANGELOG.md
          # Append empty line to CHANGELOG.md
          echo "" >> ${{ github.workspace }}/CHANGELOG.md

      # Append the artifact links to the changelog
      - name: Append Artifact Links
        run: |
          echo "" >> ${{ github.workspace }}/CHANGELOG.md
          echo "## Artifacts 🎁" >> ${{ github.workspace }}/CHANGELOG.md
          targets=(
            aarch64-apple-darwin
            aarch64-pc-windows-msvc
            aarch64-unknown-linux-gnu
            aarch64-unknown-linux-musl
            arm-unknown-linux-gnueabi
            arm-unknown-linux-gnueabihf
            armv7-unknown-linux-gnueabihf
            i686-pc-windows-gnu
            i686-pc-windows-msvc
            i686-unknown-linux-gnu
            i686-unknown-linux-musl
            mips-unknown-linux-gnu
            mips64-unknown-linux-gnuabi64
            mips64el-unknown-linux-gnuabi64
            mipsel-unknown-linux-gnu
            x86_64-apple-darwin
            x86_64-pc-windows-gnu
            x86_64-pc-windows-msvc
            x86_64-unknown-freebsd
            x86_64-unknown-illumos
            x86_64-unknown-linux-gnu
            x86_64-unknown-linux-musl
          )
          for target in "${targets[@]}"; do
            link="libmake-$target-v${{ env.VERSION }}.tar.gz"
            artifact_link="${{ github.server_url }}/${{ github.repository }}/releases/download/v${{ env.VERSION }}/$link"
            echo "* [$link]($artifact_link)" >> ${{ github.workspace }}/CHANGELOG.md
          done

        shell: /bin/bash -e {0}

      # Create the release on GitHub Releases
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: LibMake - A Rust Code generator library 🦀
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: true
          prerelease: false

  # Publish the release to Crates.io automatically
  crate:
    name: ❯ Crate.io 🦀
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      # Check out the repository code
      - name: Checkout
        uses: actions/checkout@v3

      # Install the stable Rust toolchain
      - name: Install stable toolchain
        id: install-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Cache dependencies to speed up subsequent builds
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: /home/runner/.cargo/registry/index/
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-index-

      # Update the version number based on the Cargo.toml file
      - name: Update version number
        id: update-version
        run: |
          NEW_VERSION=$(grep version Cargo.toml | sed -n 2p | cut -d '"' -f 2)
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        shell: /bin/bash -e {0}

      # Publish the Rust library to Crate.io
      - name: Publish Library to Crate.io
        id: publish-library
        uses: actions-rs/cargo@v1
        env:
          CARGO_API_TOKEN: ${{ secrets.CARGO_API_TOKEN }}
        with:
          command: publish
          args: --dry-run --verbose --token "${CARGO_API_TOKEN}"


